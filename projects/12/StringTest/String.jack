// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
	field Array str;
	field int strLength;
	field int strMaxLength;
	
    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
    	let str = Array.new(maxLength);
    	let strMaxLength = maxLength;
    	let strLength = 0;
    	return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
    	do str.dispose();
    	return;
    }

    /** Returns the current length of this String. */
    method int length() {
    	return strLength;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
    	return str[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
    	let str[j] = c;
    	return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
    	if(strLength < strMaxLength)
    	{
			let str[strLength] = c;
			let strLength = strLength + 1;
		}
    	return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
    	if(strLength > 0)
    	{
    		let strLength = strLength - 1;
    	}
    	return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
		var int retVal, i, c, consecutive;
		var boolean negative;
		let retVal = 0;
		let i = 0;
		let consecutive = 1;
		if(str[0] = 45)
		{
			let negative = true;
			let i = 1;
		}
		while((i<strLength) & (consecutive=1))
		{
			let c = str[i] - 48; // largest value as at index 0
			if((c > -1) & (c < 10)) // value of c is between 0 and 9
			{
				let retVal = (retVal*10) + c; // append the value of c
			}
			else
			{
				let consecutive = 0; // the character was not a number, thus break while loop and return
			}
			let i = i + 1;
		}
		if(negative)
		{
			return -retVal;
		}
		else
		{
			return retVal;
		}
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
		var int lastDigit, n;
		var int c;
		if(number < 0)
		{
			do appendChar(45);
			let number = -number;
		}
		let n = number / 10;
		let lastDigit = number - (n*10); // modding
		let c = lastDigit + 48;
		if(number < 10)
		{
			do appendChar(c);
		}
		else
		{
			do setInt(n);
			do appendChar(c);
		}
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
