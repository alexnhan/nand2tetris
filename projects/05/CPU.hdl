// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	// instruction[15] is the steering bit, if 0: then load A (A-instruction), if 1: then compute (C-instruction)
	// Logic for the A register
	Mux16(a=instruction,b=ALUOut,sel=instruction[15],out=inA);
	Not(in=instruction[15],out=notInstr15); // Instruction[15] = 0, means load A with Instruction[0..14]
	Or(a=notInstr15,b=instruction[5],out=loadA); // Instruction[5]=1 means load A with ALU output
	ARegister(in=inA,load=loadA,out=outA,out[0..14]=addressM);
	
	// Logic for A/M
	And(a=instruction[15],b=instruction[12],out=selAorM);
	Mux16(a=outA,b=inM,sel=selAorM,out=AorM);
	
	// Logic for D register
	And(a=instruction[15],b=instruction[4],out=loadD);
	DRegister(in=ALUOut,load=loadD,out=outD);
	
	// Logic for ALU
	ALU(x=outD,y=AorM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUOut,out=outM,zr=zero,ng=neg);
	
	// Logic for writing to M (RAM)
	And(a=instruction[15],b=instruction[3],out=writeM); // writeM when it is a compute instruction and d3 bit is high
	
	// Logic for loading PC with A (jump location)
	And(a=zero,b=instruction[1],out=z1); // value is zero and C-instruction wants to compare to zero
	And(a=z1,b=instruction[15],out=load1);
	And(a=instruction[2],b=neg,out=n2); // value is negative and C-instruction wants to compare to negative
	And(a=n2,b=instruction[15],out=load2);
	Not(in=neg,out=notneg);
	Not(in=zero,out=notzero);
	And(a=notneg,b=notzero,out=pos); // not neg and not zero = positive
	And(a=pos,b=instruction[0],out=p0); // value is positive and C-instruction wants to compare to positive
	And(a=p0,b=instruction[15],out=load3);
	And(a=instruction[2],b=instruction[1],out=j12);
	And(a=j12,b=instruction[0],out=j123); // if j1, j2, j3 = 1, then jump no matter what
	And(a=j123,b=instruction[15],out=load4);
	Or(a=load1,b=load2,out=load12);
	Or(a=load3,b=load4,out=load34);
	Or(a=load12,b=load34,out=loadPC);
	PC(in=outA,inc=true,load=loadPC,reset=reset,out[0..14]=pc); // If not load and not reset, then increment
}
